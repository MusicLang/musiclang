
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/01_basics/03_analyze_beethoven_moonlight_sonata.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_01_basics_03_analyze_beethoven_moonlight_sonata.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_01_basics_03_analyze_beethoven_moonlight_sonata.py:


3. Analyze Beethoven Moonlight Sonata
=====================================

In this tutorial we will read an existing midi file and let MusicLang perform an automatic transcription
We will then explore this transcription

.. GENERATED FROM PYTHON SOURCE LINES 8-50

.. code-block:: default

    from musiclang import Score

    score = Score.from_midi('../data/moonlight.mid')  # Insert your favourite midi file here
    # Display the first four chords
    print('MusicLang score :')
    print(score[:4])

    # Display the analysis
    print('Roman analysis : ')
    print(score.config['annotation'])

    # Convert the score as valid musiclang python code
    print('Saving it to code in "beethoven_musiclang.py" ...')
    score.to_code_file('beethoven_musiclang.py')

    # Save the score in pickle to reuse it later
    score.to_pickle('beethoven.pickle')


    """
    Convert it to a pandas dataframe to do some analytics (we called it a "sequence" in musiclang) ...
    """
    df = score.to_sequence()


    # For example compute the value counts of tonalities mode
    print('Value counts of tonalities mode per chord : ')
    print(df.groupby('chord_idx').first()['tonality_mode'].value_counts())

    """
    We can also transform our sequence, let's change all the modes to be major :
    """

    df['tonality_mode'] = 'M'

    """
    Finally let's convert it back to a score to hear it
    """
    from musiclang import Score
    score_result = Score.from_sequence(df)

    score_result.show('midi', tempo=score.config['tempo'])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_01_basics_03_analyze_beethoven_moonlight_sonata.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03_analyze_beethoven_moonlight_sonata.py <03_analyze_beethoven_moonlight_sonata.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03_analyze_beethoven_moonlight_sonata.ipynb <03_analyze_beethoven_moonlight_sonata.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
